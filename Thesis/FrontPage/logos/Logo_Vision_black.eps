%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - logos.doc)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 16:56:26 12/14/05
%%For: (Alexander Leemans)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 357 578 477 682
%%HiResBoundingBox: 357.464 577.901 477.488 682.047
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 4332 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2005-12-14T16:56:26+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-12-14T16:56:26+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-12-14T16:56:26+01:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:BDA4A92EBA6CDA11BBD7B9A82809F3B0</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:BDA4A92EBA6CDA11BBD7B9A82809F3B0</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:08292c53-bb65-4f66-a3e1-a1cebb15c0be</stRef:instanceID>
            <stRef:documentID>uuid:d51a7060-6d43-47cc-b24a-8de393e795b7</stRef:documentID>
            <stRef:versionID/>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:Company>Visionlab</pdfx:Company>
         <pdfx:SourceModified>D:20051214155427</pdfx:SourceModified>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microsoft Word - logos.doc</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Alexander Leemans</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:subject>
            <rdf:Seq>
               <rdf:li/>
            </rdf:Seq>
         </dc:subject>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:headline>
            <rdf:Seq>
               <rdf:li/>
            </rdf:Seq>
         </photoshop:headline>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
357.464 577.901 120.024 104.147 rectclip
q
357.464 577.901 m
477.488 577.901 l
477.488 682.047 l
357.464 682.047 l
h
W
n
q
n
146.52 308.88 107.34 83.4 re
W
n
Q
2.0 w
8.0 M
1 J
1.5 w
10.0 M
1 j
0 J
[6.0 4.5 ] 0.0 d
[] 0.0 d
0.75 w
1 J
2.0 w
0 J
[/DeviceGray] cs 0.0 sc
%ADOBeginSubsetFont: YLPAAA+MonotypeCorsiva,Italic Initial
ct_T42Dict begin
-0.238 -0.305 1.156 0.91
 256 array 0 1 255 {1 index exch /.notdef put} for  /YLPAAA+MonotypeCorsiva,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f3270336767000000cc000000566376
7420ba68a9e8000001240000049e6670676d2524cbb0000005c40000045f
676c796615fe431f000023a000000e1068656164be4a023700000a240000
0036686865610e4f084700000a5c00000024686d7478fe0c91a400000a80
00000a746c6f63613f634203000014f40000053c6d6178700522017f0000
1a30000000206e616d650bbed94d00001a500000056d70726570934cd750
00001fc0000003de67646972000000000000000000000000000102cd0190
00050000059a0533ffd400b7059a053300b601ed006602120a0603010101
010201010101000002870000000000000000000000004d4f4e4f00010020
fb020583fdee00fa0652026c2000009fdfd70000000005800003049d0010
04a2000d03490000ffdaff920000ffe6ffe6fffffe00ffee05610022fe23
ffde0296000004c30000023fffee04b100000000fff10271000000000000
0000000000000000ffffffffffffffffffffffffffffffffffffffffffff
ffff026401ea000000000000000000000000000000000000000000000000
000000000000ffffffffffff0000000000a7000000000000000000000000
000000000000000000000000008b0062007d006f0080009600270137003f
00930174004b003c00b900120045006d0048008c00a7004300c900d0004d
007100a800f70037025900b500610083014f005d0003002b003800460015
002b002f0039005f0025007500f20031003200410052006a01f20375003f
007800af0016003b003d00720089009401ea029405b10002000600470066
006f006f00a500130017003e0056007000840089009000b302b803230338
00290038003a006100610064006e0087009a00a9010c01b401fa02d102d1
03070003001f003c003e0044004f005200620067006800690086009200c5
011e01220122019d01d401e101ed022e028c02fa036e0401040504180467
04ab054d057305a0000200200020002d00300037003c0050005500650074
0078007800810082009c009f00a200a500a600a800ab00ad00b700b800bb
00be00cb00d4010a01220129013b015e0183018702160256029f02c002c5
02e703110361037d039203a3044a045404a104b70576059005d4069506ed
00010004000f0014002200270032003e0040004300590066006d00730073
007a008600860089008d009d00a800ac00b000b500e300e700e800eb00ef
010701160131014501450156015d015f01a901b801b901c701cb01d901f4
01fc02090230023d024102660266026b02710280029902a502ab02b302c9
02e302e702f202f302fa033c03400345035503730375039e03a803ad03bf
03e303e503eb040004180426043c043f044e0485048d04b004bc04cd04d5
04f904fe0500050e0513052f0535054905530554055905610574057b0595
05bb0601061d063a0641066106b906b906de073e077c079b0805082300b0
00c200ae00000000000000000000000000000072021d00900079068e0063
017300a8009a007e00f2008d009e00f200be00060678005b00d202180096
00d100d1001701050014004600450116001900c900cb014d007900af001c
007a016e025b02c80046000501bf002c00fa007400ad01af00e000ce015a
011500020287005e0033017600b900a800bf01490259005d00d800180243
00c301c800880148007e00bb00b300b300cb002c00f5010a044b00ca0074
008e00cb00bd010100fd006a001700420118036600d600a600e800f700cb
01210167004c00e001660052005700c200690008002000d7013b008f0132
010f0121019101e900ae0190010c0019017401e6014e009f0280003d0140
009b0113001d00b6028703270208056b0164007f023c00ec02c501cc0070
0095015e00f405ed00de00d301db00e400b5026902df00ec024c0157029c
02da01ea018c038600f90192018200b601df01d701b40092018800d4001d
019807730017000200dc011f0046004600e10103002700ba03af000c0089
006c006800004037383734333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1024645
3ab10200080d2d2c45b04a234445b04923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0472344b0477ae4
182d2cb801a65458b00943b801005458b9004aff80b14980444459592d2c
b01243588745b0112bb0472344b0477ae41b038a45186920b04723448a8a
8720b0a05158b0112bb0472344b0477ae41b21b0477ae45959182d2c2d2c
4b52582145441b23458c20b00325455258441b212159592d2c01182f2d2c
20b0032545b049234445b04a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a4a40b9ffe0004a45208a54582321
b03f1b235961441cb114008a5279b34940204945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4569b009
43608a103a2d2c01b005251023208af500b0016023edec2d2c01b0052510
23208af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110
203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743
b006430b2d2c3eb02a2a2d2c352d2c76b04b23701020b04b4520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4523204520b10405258a505826618a8b1b26608a8c59442d2c46234660
8a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b00050
58b00161b8ffc08b1bb0408c5968013a2d2cb0332bb02a2a2d2cb0134358
031b02592d2cb0134358021b03592d00000100000002599aa6acf2c15f0f
3cf5001b080000000000a55575f400000000b268e8d0fe15fd8c0945074d
0000000b0001000000000000000100000652fd94003c0897fe15fdf10945
018e0064000000000000000000000000029d060001000000000001c20000
01c20000023d010e01c3012d05710159038500ae0571014b063d00e90148
0171021400ba01c3ff6f035c01180429011201c30025023d00a801c30095
02b8ffe9038500d1038500d3038500970385009403850099038500850385
00f80385012a038500c5038500930214009501eb0023042900de04290112
0429014b030a00b3059a010304f6ff9804cd0089042900c4059a008e04f6
008704a300e504f601030571002b030a008a03330001054800b204a40062
06b80081059a005904cd00d20452009504cd00d204cd00c203ae00260400
00a205eb00ed051f00d2070a00c5047bfff0047b00c604f6008801eb0081
03d701ac028f0042042901f80400fff401c30137035c0097035c00ef02b8
00b00385009a02b800a5028ffedd0333ffe5038500b201eb00a201c3ff1d
038500b401eb00c104f600ab03ae00aa033300ae0385ffe30333009c0266
00a7028f0082028f00db03ae00a80385009105710097035c00300333ffc3
0385004a01eb00b20429029b01ebffb20429011904f6ff9804f6ff980429
00c404f60087059a005904cd00d205eb00ed035c0097035c0097035c0097
035c0097035c0097035c009702b800a202b800a502b800a502b800a502b8
00a501eb00a201eb00a201eb00a201eb00a203ae00aa033300ae033300ae
033300ae033300ae033300ae03ae00a803ae00a803ae00a803ae00a803ae
01150333019e0385007b03d70069035cffc404cd020004000066035cfe85
05eb00bb05eb00bb080000ad026601d002e101b70464012f05ebffc30548
010705b40036046400f6046400fc0464016805c3016a049c00a203f40041
05b4002b0695002e0464004802310000021400c8021400ef062500320452
009a038500c903330085023d00c104cd0164046400510333fee004640137
04e5001a02b800a2030a0077080000f101c2000004f6ff9804f6ff9804cd
00d2068f00d1047b00b00400007f0800007f02b8017402e1018a01eb0190
01eb01900464012e03f4002f0333ffc3047b00c6007bff6e0385009301eb
00d9021400770429fed60429fede03d7005601c3011b01710019023d0010
07ae014204f6ff9804f6008704f6ff9804f6008704f60087030a008a030a
008a030a008a030a008a04cd00d204cd00d20652000004cd00d205eb00ed
05eb00ed05eb00ed01eb00a202b80168038501de038501dd0385022b01c3
01aa026601bf02660091033300a4023d008a02b801db04a4006202660087
03ae0026028f008204f600880385004a0429029b059a008e033300ac047b
00c60333ffc3045200a50385ffe304cd016404290158021d00de021d00b5
021d00c3054801280548012d0548011d04a200e504f601030333ffe5030a
008a03ae0026028f0082042900c402b800b0042900c402b800b00385009a
0400012202aa022c021d00d204f6ff98035c009704f6ff98035c0097059a
008e03dc009a059a008e04f6008702b800a504f6008702b800a5063d008a
03ae00a104a4006201eb00c104a4006202b300c104a4006202a000c1059a
005903ae00aa059a005903ae00aa04a8011704cd00d2033300ae04cd00c2
026600a704cd00c2026600a703ae0026028f0082040000a2028f008b0400
00a2028f00db05eb00ed03ae00a805eb00ed03ae00a804f600880385004a
04f600880385004a052b00610638006b0639006b0449005203c90052038b
005204ae0052036b0041047900520400fff40148015001c3010c03de010e
026400d10897009504dc012f034200ab0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c000c00429011204d50117
02d6013802d6013804d5014f02d6012502aa009904f6ff98035c00970429
00c402b800b0042900c402b800b004f6008702b800a504f6008702b800a5
04f6008702b800a504f601030333ffe504f601030333ffe504f601030333
ffe50571002b038500b20571002b038500b2030a008a01eb00a2030a008a
01eb00a7030a008a01eb00a2030a008a01eb00a20333000101c3ff1d0548
00b2038500b4038500a804a4006201eb005e059a005903ae00aa056400b2
036800aa04cd00d2033300ae04cd00d2033300ae04cd00c20266009c03ae
0026028f0082040000a2028f00a105eb00ed03ae00a805eb00ed03ae00a8
05eb00ed03ae00a805eb00ed03ae00a8070a00c505710097047b00c60333
ffc3022ffead04f6ff98035c009705ebffc30452009a05480107038500c9
02e1025202e10120050effb00215012505ba00f2064200f1033500b50512
00f204f80109055c00c601eb00a204f6ff9804cd0089046600e6039efff4
04f6008704f600880571002b04cd00d2030a008a054800b204f6ff9806b8
0081059a0059052700da04cd00d20571002b04520095056000d0040000a2
047b00c6051f00dc047bfff005fc009f054600af030a008a047b00c603cf
009a02be00a8039c00aa01eb00a2038d00a103cf009a03a8ff2603c7ffd0
033300ae02be00a802eb009b039c00aa035c00ed01eb00a203c300a803fc
003703ae000e0385009102e900ad033300ae044e0037038f000002b400bc
038100ae032300a5038d00a104b600890404ffdc057b009204e900ad01eb
00a2038d00a1033300ae038d00a104e900ad04f60087053b00a3046600e6
042900c503ae0026030a008a030a008a033300010689ff9706b2002b054e
00a2054800b205950093057100c904f6ff98045a006104cd0089046600e6
059a008e04f6008706b80044042900940573002b0573002b054800b204f6
ff9806b800810571002b04cd00d20571002b04520095042900c40777002a
05950093064800d1047bfff0057100c9059c009f079e00c8079e00c80493
00f1075e00a404a000a40429007107a4002b044cfe15035c0097033d00cc
02ee00a502be0096033300ac02b800a50537002402fe009403ae00a803ae
00a8038500a80366003704fa003603ae00a8033300ae03ae00aa0385ffe3
02b800b004f600ab0333ffc304b6000c035c003003ae00a80373006d050a
00a8050a00a803c3006304e300a3033d00a4033300b004eb00a803be006d
02b800a50350002d02c7009702b800b0028f008201eb00a201eb00a201c3
ff1d04b0003604c300a8038500b2038500a80333ffc303aeffe0042500e6
02aa00cc070a00c505710097070a00c505710097070a00c505710097047b
00c60333ffc30600007f01eb017d0385011c03d700690739005904cd00f6
0548011c05480100054800eb0548014d04cd009904cd015004cd02c104cd
01a505b4ffee05b4028305b4028305b4ffee05b4028305b4ffee05b40283
05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b401c505b4028305b4
01c505b401c505b4ffee05b4ffee05b4ffee05b4028305b401c505b401c5
05b4ffee05b4ffee05b4ffee05b4028305b401c505b401c505b4ffee05b4
ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee
05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4
02da05b4006b05b4ffee05d7000004d500920800000007eb013007eb0120
07eb013007eb012004cd00ae04cd007c04cd0026082b0198086b01b80756
0010046b0059055600660444003c054a003c04ba003c040e003c062b001a
08000130026600a8021d00eb021d014d021d00fa04cd016b000000270027
002700270027002700270027002700270027002700270027002700270027
002700270027002700270027002700270027002700270027002700270027
002700270027002700270027002700270027002700270027002700270027
00c500c500c500c500c500c500c500c50172017202120212021202120212
02120212021202120212021202b2033f033f033f03bb03bb03bb04b50550
0550055005500550063e0682068206820682070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070807080708070807080708070807080708
070807080708070807080708070800010000029d00f2003c007700050002
001000140039000001f6ffff000300010000000c00960001000000000000
00c000000001000000000003001d00c00001000000000004001d00dd0001
000000000006001d00fa0001000000000007006e01170003000104090000
018001850003000104090001003a03050003000104090002000e033f0003
000104090003003a034d0003000104090004003a03870003000104090006
003a03c1000300010409000700dc03fb4469676974697a65642064617461
20636f7079726967687420546865204d6f6e6f7479706520436f72706f72
6174696f6e20313939312d313939352e20416c6c20726967687473207265
7365727665642e204d6f6e6f7479706520436f7273697661aa2069732061
2074726164656d61726b206f6620546865204d6f6e6f7479706520436f72
706f726174696f6e207768696368206d6179206265207265676973746572
656420696e206365727461696e206a7572697364696374696f6e732e4b4e
4e424f472b4d6f6e6f74797065436f72736976612c4974616c69634b4e4e
424f472b4d6f6e6f74797065436f72736976612c4974616c69634b4e4e42
4f472b4d6f6e6f74797065436f72736976612c4974616c69634d6f6e6f74
79706520436f7273697661aa20697320612074726164656d61726b206f66
20546865204d6f6e6f7479706520436f72706f726174696f6e2077686963
68206d6179206265207265676973746572656420696e206365727461696e
206a7572697364696374696f6e732e004400690067006900740069007a00
6500640020006400610074006100200063006f0070007900720069006700
68007400200054006800650020004d006f006e006f007400790070006500
200043006f00720070006f0072006100740069006f006e00200031003900
390031002d0031003900390035002e00200041006c006c00200072006900
67006800740073002000720065007300650072007600650064002e002000
4d006f006e006f007400790070006500200043006f007200730069007600
61212200200069007300200061002000740072006100640065006d006100
72006b0020006f006600200054006800650020004d006f006e006f007400
790070006500200043006f00720070006f0072006100740069006f006e00
20007700680069006300680020006d006100790020006200650020007200
650067006900730074006500720065006400200069006e00200063006500
72007400610069006e0020006a0075007200690073006400690063007400
69006f006e0073002e004b004e004e0042004f0047002b004d006f006e00
6f00740079007000650043006f00720073006900760061002c0049007400
61006c006900630052006500670075006c00610072004b004e004e004200
4f0047002b004d006f006e006f00740079007000650043006f0072007300
6900760061002c004900740061006c00690063004b004e004e0042004f00
47002b004d006f006e006f00740079007000650043006f00720073006900
760061002c004900740061006c00690063004b004e004e0042004f004700
2b004d006f006e006f00740079007000650043006f007200730069007600
61002c004900740061006c00690063004d006f006e006f00740079007000
6500200043006f0072007300690076006121220020006900730020006100
2000740072006100640065006d00610072006b0020006f00660020005400
6800650020004d006f006e006f007400790070006500200043006f007200
70006f0072006100740069006f006e002000770068006900630068002000
6d0061007900200062006500200072006500670069007300740065007200
65006400200069006e0020006300650072007400610069006e0020006a00
7500720069007300640069006300740069006f006e0073002e000000b802
49b3f61e1f6fbe024e007f024e008f024e0003024e401e591e1f00591059
205970598059905906a059b059c059d059e059f05906afbe024c00bf024c
00cf024c00df024c407e0400140015101410152014201506001400152014
20152016201730143015501450156014601580148015c014c015c016c017
f014f0151409001400150200140015020800180019020018001910181019
201820192f1e2f1f701870197f1e7f1f0c09001800190208010001010009
01020008004646000000121108404868bb018b00480032024db3681d1f20
b80125b2483220b8011f4073483220f6483220f5483220f4483220f34832
20f1483220f0483220ee483220ed483220eb483220c5483220c4483220b2
483220b0483220a4483220a2483220a14832209c48322092483220904832
208c4832208b48322074483220724832206a4832205e4832205a48322059
48322055483220b8012eb2483220b8012cb2483220b8012ab2483220b801
29b2483220b80124b2483220b801214080483220f2483220ef483220e948
3220e6483220a5483220a34832209148322082483220814832206d483220
5748321609160990cc0790cb07909407908807907507907107906f07906e
07906b07906707906207905f07905c072408220820081e081c081a081808
16081408120810080e080c080a08080806080408020800080001b013034b
024b5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b
004b5442b0382b4bb8080052b0372b4bb009505b58b101018e59b00288b8
01005458b801c0b101018e851bb0124358b900010137858d1bb9000101ff
858d595900162b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b182b2b2b2b
2b2b2b2b2b2b2b2b2b014b5079b9001f012b400a071fe5071fc8071fc107
2b2b2b2b4b5379b90090012b400a0790e50790c80790c1072b2b2b2b1801
b25000374b618b601d002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
0145695342014b5058b108004259435c58b108004259b3020b0a12435860
1b2159421610703eb0124358b90fce3e051bba00fd03e0000b2b59b00a23
42b00b2342003f3f182b103c012f060cb0062342b0072342b0124358b93b
21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d41
1bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01
a80400000b2b59b0102342b01123420100b0024568b801954568b0408b60
b0202344b0064568b801964568b0408b60b0222344b0004568b801984568
b0408b60b801972344005e735e73735e73735e7373730173742b752b0000
00>
[3601 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 0 <00020100000005000500000300070025b504dc0007dc01b8016eb7000a04
db0005db03b9016000002ffee510e5003ffee510e5313021112111252111
2101000400fc2003c0fc400500fb002004c0>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
YLPAAA+MonotypeCorsiva,Italic /CharStrings get begin
end
end
%ADOEndSubsetFont
[/N89 (YLPAAA+MonotypeCorsiva,Italic) 1 TZ
360.3 578.7 m
%ADOBeginSubsetFont: YLPAAA+MonotypeCorsiva,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YLPAAA+MonotypeCorsiva,Italic gcheck setglobal} if
1 394 55 <000100a2ffee05d705470047008c401f3f44445a0f11140f0f110f2a0700
5d017b4661037b070a5d09b9445b070a20b8022e401028137711287b2a3d
773f2c7b37ec2a11ba01bc003f011c40182a020001090a0f113f4408341d
861734973017762430873ab9017200242ffded10ed10e410f4111739003f
fde510e4e410e410e410e410ed3fedf6ed10f4edf4ed11123987052e2b7d
10c43130250706232227262322073736373e011b01372623220e01151417
161716151406232227263534362433321716333237363534272635343633
32161514062322270607030f0116333203df0e452c2a61493a646a0e652e
212f5380073b1eb9d96d0b082422281c2a1a26970108bd5ac58c3f3f1a1a
030324191e27a2be444d0a35573537432c4339390f090612370a20176f01
4c021219025098581f1a1228251f1b26283b5b7ae67e1a12151523071513
061b242c254c6e0624d0fea6d3f10800>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 1910 75 <000100b2ffe403eb05830040013940578f4201330d3a08090b1301082c13
1516162b2c2c162b333a3a55080d1408080d2b161655171a1417171a2b1a
243013842c2c301616170a0f573007303d246328571e0084010001100120
013001b0010509000101083d01b801ddb7051e01050b019e00b801e24049
3a21de0d6833161a2b2c04172f083f084f085f086f087f08066f087f088f
0803091f082f083f084f086f080539085e3a3a0d688f33010f33af33bf33
cf33df33ef3306090f33010833b80150401a09a017013940170140170100
171017a017c017040900170108172f5e5d5e5d71715e5d5efd5e5d5e5d71
fd392fed5e5d5e717211173910ede410f6e4003f3f10ed395e5d5e5d10ed
10fde411393fed3f3c11123910ed1112393987052e2b7d10c4872e182b7d
10c4001112390139870e103cc43c005e5d5e002e2e2e2e3130015d251706
0706232226353436373635342322070607060703233637133e0233321615
140623222726232206070336373633321615140706070e01151416333237
3603d11a5c61422b232b214d22222a3f58442b1a5095301a932883d3672b
32312a182656212e3a1f70778c5232272c080d3041170b0b184225d42566
3c29383b2899fc7c15222a3a5a3a72fea4af6f0282b1bf722a201b29050c
4a89fe127d56332f2a22223b9bd668291010391f>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 1662 72 <000200a5ffe60316034b001a0027007f401740004001023f296f297f299f
29af290500844001010501b801df401e031b8412120322600a1757030a07
030b009e01de0d121b1f1468061f5e0db80147b510069f0602062f5dfded
10fd11393910f4e4003f3f10ed10ed12392fed10fd435840114001500160
01700180019001cf01ef0108015d595ded3130015d005d25170623222635
343736333216151406070607061514163332373627363736353426232207
06070602ba21f5af474b8292cb474b5a743abe092d2b293142dfa151372d
2425232f202efb2ce9606ad6d4f1473e417e44215636314738171ff04853
3a392b331c254b6e>YLPAAA+MonotypeCorsiva,Italic AddT42Char 

1 0 3 <> YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 740 57 <000100d2ffd7066705800036009e402e0700160002780088009800a800f7
00051f2321216400351400003500030035035a1f21141f1f210321233504
0011ba022c002e01d2b6065d1a03000806b801ce40191c1c212335042b00
1f9203032b0e7d0a2b7d270a7615278731b8017ab50900150108152f5e5d
5efded10ed10e410f411392fed3911173910ed003f3fede4ed1217398705
2e2b087d10c487042e182b057d10c4002e31300071720503263534363722
0e011514171615140623222726353436373637363706021514173f013637
36353427263534363332161514060207060283240b4d6275f371151b1c16
20181eb8a067c53537875212c0a4f85641170f291c263444dae4ef2901e4
942f87e38270924a22263019171c212c417ae236230d0406c6fef7e3ae90
cda8ff936f5b323c26141b284e5351b5fee8e7f2>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 2410 76 <000200a2ffe4029f04f7000b002b00b340211f2d2f2d0213271723131717
552327142323271a6520295710401caa13901d011db801ddb520400c6313
0db801ddb7100706f200200b1cbf01de001d012d0017000c01de000d012d
b327096803b801d9b2136827b80126b2175e13b801344013002340230210
23502380239f23e023f02306232f5d71ededf4fdf4ed10f4ed10f4ed003f
2fed3ffd4b5258b0001a59ec1a10fd5d4b5258b0001a59ec1a10ed10ed87
052e2b7d10c4002e2e2e2e3130017101321615140623222635343601273e
0133321615140702151416333237170e0123222635341336353423220602
581f283d261e283afe9e2c64a53a2022416a0e08208427897e2823299607
12143304f729202c432a222d3ffd6a226e5d1c181dd9fe9d490e137c2681
482c277d01e617121420>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 3332 86 <00010082ffe6031f034a0032007d4017001c101c0209001c010820343034
02281138114811031cb801e64017272f063f064f060306e40b6000276016
0007160b2b5e13b801d94009030e90703080300230b801e5b3191fda23b8
0125400c03cf101920193019f01904192f5dedfde410f45ded10f4ed003f
3f10ed10fde45d10e43130015d5d005e5d5e5d0132161514062322262726
232206151416171615140623222635343633321615140706151417163332
3e01353426272635343602655961291d131c1a3130293f28516fb48e7774
2c201c2802011c1b2f36522e2b4b689e034a452d1b281122413f2f294d56
766a6a9f6147232e25190a100d09211717254b25244853746b629300>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 3196 82 <000200aeffe303820349000c001a0031401d2f1c4f1c020d600014600600
07060b10680918684f030103b6100901092f5dfd71ed10ed003f3f10ed10
ed3130015d01321615140023222635343736172206151417163332373635
3426029e6282fec8ae6b8378978c559f31243c5445585103499c8bdefe9f
8c79d2b2dd4bf3d6824b376887c89680>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 2720 81 <000100aaffe40413034c003e01254037404001304001112a17260a0a0933
11171755262a1426262a09333355343714343437090e372c1a00840f011f
012f013f017b01bb010601ba01dd003b01e340160433342c570e63041e84
001f101f201f301fb61f051fb801dd400c1a6523340a0407230b019e00b8
01dcb3371f9e1eb801e2404117093334370434175e2f263f264f265f266f
267f26066f267f268f2603091f262f263f264f266f26053926262a680f11
af11bf11cf11df11ef1106090f11010811b801504017103420344034c034
d034055034603470348034f03405342f5d71fd5e5d5e5dfd392f5e5d5e71
72ed12173910f6e410f6e4003f3f3f10edfd5ded7d10f418ed103c10edfd
5ded111239113987052e2b7d10c4872e182b7d10c4001112390139002e2e
2e2e3130015d7113273e0133321615140f01363736333216151407060706
151416333237363717060706232226353413363534232207060706070323
36371336353423220706cc228098361518052d669a5235272c091044400c
0b1d3e2c2c195c633f29262a6f2225283f5e3f281b51952a1f590514101e
3e025f237a50120c0917c9716233322f1f2741dacc43141438282224663e
28373e5901627e151f2a3e543676fea39689017c170a1b152900>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 78 47 <00010062ffda04b604b4003c008c402a0b201b202b203b2004fb20018622
9622a622031e1a1e1e5a05071405050705071a030a3b015d00b93b10b802
28b415660a0231b801ff401c3722252766377b205d3b0a0105071a1e2006
2e000d0d342a8d2e9234b8010ab31f0001002f5dfdfdf411392f11121739
003fedf4fd323210ed3feded10f6ed1112173987052e2b7d10c4002e3130
005d5d7117373e023712373e013332161514062322272e012322070e0107
060702070607363332161716333236353427263534363332161514062322
27242322620c69473931413551f17b4f6c21171e2b3035191d1c2759301f
304b271c288f55355a70612726350e0d201a1e2a907b3d60febc64931136
143485d0011379b6b0502b1822272a1a10167b7952bcfed562462e200d1a
172f1e132220131b1f352e577e091d00>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 1060 68 <00020097ffe303c7036800290036009a40237038010601060655182a1418
182a000129272c0c84000d100d200d300d800d900d060db801dd403d132a
192c3318081d2c652707270133571d0b1d0857130106130b0001060c1618
19292a090d305e300d010da75f216f217f218f210410219f21af2103212f
5d71ed5dfd111739003f3f10ed393ffd11393fed1112391112393910fd5d
ed111239113987052e2b0e7d10c4002e3130015d01370706070615143332
37363717060706070623222635343f010607062322272635341236373633
3217072623220602151416333236370358424b2d28161910233e39207220
403a26241a1a08285677493d3a1f2a71be69517f20216436255a86732e25
459e25035a0efd97c56b1f1f1525372768162c150e18170f1a88674a2e29
37596a0104d4322604720b63feff80443c958c00>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
1 1380 69 <000200efffe303ce057c002200300088403927222727550f10140f0f1022
101a0f000a23650307032a1a631e57142a600a14000a0b001022032d0f27
0d17170627270d2d684f06af060206b8014c401609100d200d0239400d70
0d02400d500d600d800d040d2f5d715e715efd5ded11392f11332f111239
111739003f3f10ed10fde411393fed12393912393987052e2b7d10c4002e
3130013e0133321615140206232226353437133e02333216151406232227
262322070607132206021514163332123534272601de519d3c46549ae36c
5c6e1b762b82d45f3935302c2151241c321f172873318778452e6fae2117
029a59537071a4fec6a46c56457b0211c2cb7927211e280f07362aabfede
76fed5903649015fae4f3222>YLPAAA+MonotypeCorsiva,Italic AddT42Char 
YLPAAA+MonotypeCorsiva,Italic /CharStrings get begin
/T 55 def
/h 75 def
/e 72 def
/space 3 def
/V 57 def
/i 76 def
/s 86 def
/o 82 def
/n 81 def
/L 47 def
/a 68 def
/b 69 def
end
YLPAAA+MonotypeCorsiva,Italic /Encoding get
dup 84 /T put
dup 104 /h put
dup 101 /e put
dup 32 /space put
dup 86 /V put
dup 105 /i put
dup 115 /s put
dup 111 /o put
dup 110 /n put
dup 76 /L put
dup 97 /a put
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N89 21.0 Tf
(The Vision Lab )
[10.5021 9.24215 7.14202 4.62633 13.4421 5.04222 6.72225 5.04222 8.40197 9.66224 4.62633 
12.1821 8.82206 8.82206 4.62633 ] pdfxs
n
[/DeviceRGB] cs 1.0 1.0 1.0 sc
358.920013 598.559998 117.000000 81.900024 rectfill

8.0 M
0 j
1 J
n
475.92 680.46 -117.0 -81.9 re
358.92 680.46 m
h
0.0 0.0 0.0 sc
S
n
358.92 651.96 111.0 -1.5 re
469.92 651.18 m
465.9 656.22 l
475.92 651.18 l
465.9 646.2 l
f
n
358.92 628.56 111.0 -1.5 re
469.92 627.78 m
465.9 632.82 l
475.92 627.78 l
465.9 622.8 l
f
1.5 w
10.0 M
1 j
0 J
[6.0 4.5 ] 0.0 d
n
358.92 639.48 m
394.02 639.48 l
S
n
418.14 651.18 -1.5 23.28 re
416.64 651.18 m
h
417.42 674.46 m
412.38 670.44 l
417.42 680.46 l
422.4 670.44 l
f
n
440.82 680.46 m
440.82 598.56 l
394.02 680.46 m
394.02 598.56 l
440.82 639.48 m
475.92 639.48 l
S
1.75 w
[] 0.0 d
n
358.92 680.46 m
378.42 654.12 397.92 627.78 417.42 627.78 c
436.92 627.78 456.42 654.12 475.92 680.46 c
S
1.5 w
n
358.92 598.56 m
378.42 624.9 397.92 651.18 417.42 651.18 c
436.92 651.18 456.42 624.9 475.92 598.56 c
417.42 627.78 m
417.42 598.56 l
S
n
417.42 647.46 m
413.28 647.46 409.92 644.1 409.92 639.96 c
409.92 635.82 413.28 632.46 417.42 632.46 c
421.56 632.46 424.92 635.82 424.92 639.96 c
424.92 644.1 421.56 647.46 417.42 647.46 c
eofill
0.75 w
1 J
n
417.42 647.46 m
413.28 647.46 409.92 644.1 409.92 639.96 c
409.92 635.82 413.28 632.46 417.42 632.46 c
421.56 632.46 424.92 635.82 424.92 639.96 c
424.92 644.1 421.56 647.46 417.42 647.46 c
h
S
n
420.42 644.46 m
419.58 644.46 418.92 643.8 418.92 642.96 c
418.92 642.12 419.58 641.46 420.42 641.46 c
421.2 641.46 421.92 642.12 421.92 642.96 c
421.92 643.8 421.2 644.46 420.42 644.46 c
1.0 1.0 1.0 sc
eofill
q
n
332.94 123.12 163.5 122.28 re
W
n
Q
q
n
112.74 167.1 163.74 1.25999 re
W
n
Q
q
n
201.12 134.88 7.38 7.74001 re
W
n
Q
q
n
209.94 134.88 6.48 7.74001 re
W
n
Q
q
n
217.74 134.88 6.42 7.74001 re
W
n
Q
q
n
224.88 134.88 9.89999 7.74001 re
W
n
Q
q
n
236.22 134.88 6.0 7.74001 re
W
n
Q
q
n
243.96 134.88 6.60001 7.74001 re
W
n
Q
q
n
252.42 134.88 5.99998 7.74001 re
W
n
Q
q
n
260.16 134.88 5.88 7.74001 re
W
n
Q
q
n
267.78 134.88 6.42001 7.74001 re
W
n
Q
Q
/YLPAAA+MonotypeCorsiva,Italic /Font _pdfUndefineResource
/N89 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
