%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - logos.doc)
%%Version: 1 5
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 13:11:48 11/24/05
%%For: (Alexander Leemans)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 335 135 494 237
%%HiResBoundingBox: 335.104 134.674 493.913 237.08
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3698 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2005-11-24T13:11:48+01:00</xap:CreateDate>
         <xap:ModifyDate>2005-11-24T13:11:48+01:00</xap:ModifyDate>
         <xap:MetadataDate>2005-11-24T13:11:48+01:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:65E2387DE35CDA11A4D6B5A242C0C6E8</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:65E2387DE35CDA11A4D6B5A242C0C6E8</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:documentName>uuid:425213d6-2cc5-45a5-92d1-7e5d37915683</stRef:documentName>
            <stRef:documentID>uuid:fc53e1cb-2810-4bb2-89f3-db88ffbc2d5a</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Alexander Leemans</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Microsoft Word - logos.doc</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
335.104 134.674 158.809 102.406 rectclip
q
335.104 134.674 m
493.913 134.674 l
493.913 237.08 l
335.104 237.08 l
h
W
n
q
n
146.52 308.88 107.34 83.4 re
W
n
Q
1 J
1.5 w
8.0 M
0 J
1 j
10.0 M
[6.0 4.5 ] 0.0 d
1.75 w
[] 0.0 d
1.5 w
1 J
0.75 w
0 J
2.0 w
1 J
0 j
1.5 w
8.0 M
0 J
1 j
10.0 M
[6.0 4.5 ] 0.0 d
1.75 w
[] 0.0 d
1.5 w
1 J
0.75 w
q
n
112.74 167.1 163.74 1.25999 re
W
n
Q
q
n
201.12 134.88 7.38 7.74001 re
W
n
Q
q
n
209.94 134.88 6.48 7.74001 re
W
n
Q
q
n
217.74 134.88 6.42 7.74001 re
W
n
Q
q
n
224.88 134.88 9.89999 7.74001 re
W
n
Q
q
n
236.22 134.88 6.0 7.74001 re
W
n
Q
q
n
243.96 134.88 6.60001 7.74001 re
W
n
Q
q
n
252.42 134.88 5.99998 7.74001 re
W
n
Q
q
n
260.16 134.88 5.88 7.74001 re
W
n
Q
q
n
267.78 134.88 6.42001 7.74001 re
W
n
Q
q
n
332.94 123.12 163.5 122.28 re
W
n
n
[/DeviceGray] cs 1.0 sc
332.940002 123.120003 163.500000 122.279991 rectfill

Q
n
336.36 167.58 m
492.72 167.58 l
336.36 167.58 l
[/DeviceRGB] cs 0.12157 0.10196 0.090196 sc
eofill
n
336.359985 167.039993 156.359985 1.080002 rectfill

n
336.66 158.34 m
413.94 158.34 l
336.66 158.34 l
eofill
n
336.660004 157.559998 77.279999 1.619995 rectfill

n
336.66 148.38 m
413.94 148.38 l
336.66 148.38 l
eofill
n
336.660004 147.240005 77.279999 2.220001 rectfill

n
336.66 137.7 m
413.94 137.7 l
336.66 137.7 l
eofill
n
336.660004 136.320007 77.279999 2.759995 rectfill

n
427.32 154.68 m
427.32 154.5 l
427.26 154.32 l
427.26 154.02 l
427.2 153.9 l
427.14 153.72 l
427.14 153.6 l
427.08 153.48 l
427.02 153.36 l
426.84 153.0 l
426.72 152.88 l
426.66 152.76 l
426.54 152.7 l
426.48 152.58 l
426.24 152.46 l
426.06 152.28 l
425.94 152.22 l
425.76 152.16 l
425.64 152.16 l
425.4 152.04 l
425.22 152.04 l
425.1 151.98 l
424.92 151.98 l
424.74 151.92 l
423.66 151.92 l
423.48 151.98 l
423.36 151.98 l
423.0 152.1 l
422.88 152.16 l
422.7 152.22 l
422.58 152.28 l
422.4 152.34 l
422.16 152.58 l
421.98 152.7 l
421.8 152.88 l
421.74 153.0 l
421.68 153.06 l
421.62 153.18 l
421.56 153.3 l
421.56 153.36 l
421.44 153.6 l
421.38 153.84 l
421.32 154.14 l
421.26 154.38 l
421.2 154.68 l
421.2 159.54 l
422.82 159.54 l
422.82 154.32 l
422.94 154.08 l
423.0 153.9 l
423.06 153.84 l
423.12 153.72 l
423.42 153.42 l
423.66 153.3 l
423.78 153.3 l
423.9 153.24 l
424.5 153.24 l
424.68 153.3 l
424.8 153.3 l
424.98 153.36 l
425.1 153.42 l
425.22 153.54 l
425.34 153.6 l
425.46 153.84 l
425.58 153.9 l
425.64 154.08 l
425.64 154.2 l
425.7 154.32 l
425.7 159.54 l
427.32 159.54 l
427.32 154.68 l
0.11765 0.098039 0.086275 sc
eofill
n
433.2 159.54 m
434.7 159.54 l
434.7 152.16 l
433.2 152.16 l
430.2 157.44 l
430.2 152.16 l
428.76 152.16 l
428.76 159.54 l
430.32 159.54 l
433.2 154.44 l
433.2 159.54 l
eofill
n
436.140015 152.160004 1.440002 7.380005 rectfill

n
443.4 159.54 m
444.96 159.54 l
442.44 152.16 l
441.0 152.16 l
438.54 159.54 l
440.1 159.54 l
441.66 153.9 l
441.84 153.9 l
443.4 159.54 l
eofill
n
451.44 158.22 m
447.48 158.22 l
447.48 156.66 l
451.08 156.66 l
451.08 155.34 l
447.48 155.34 l
447.48 153.48 l
451.56 153.48 l
451.56 152.16 l
445.92 152.16 l
445.92 159.54 l
451.44 159.54 l
451.44 158.22 l
eofill
n
452.76 159.54 m
456.96 159.54 l
457.08 159.48 l
457.26 159.48 l
457.38 159.42 l
457.5 159.42 l
457.68 159.36 l
457.8 159.3 l
457.86 159.24 l
458.1 159.12 l
458.16 159.06 l
458.22 158.94 l
458.34 158.88 l
458.46 158.76 l
458.58 158.58 l
458.64 158.4 l
458.82 157.86 l
458.82 157.02 l
458.76 156.84 l
458.7 156.72 l
458.7 156.6 l
458.64 156.48 l
458.58 156.36 l
458.46 156.24 l
458.34 156.0 l
457.98 155.82 l
457.92 155.76 l
457.8 155.7 l
457.98 155.64 l
458.16 155.52 l
458.22 155.46 l
458.28 155.34 l
458.46 155.16 l
458.46 155.04 l
458.58 154.92 l
458.58 154.8 l
458.64 154.62 l
458.64 154.44 l
458.7 154.26 l
458.7 152.88 l
458.76 152.7 l
458.76 152.52 l
458.82 152.46 l
458.82 152.4 l
458.88 152.34 l
458.94 152.34 l
458.94 152.16 l
457.26 152.16 l
457.26 152.4 l
457.2 152.7 l
457.14 152.88 l
457.14 153.6 l
457.08 153.96 l
457.08 154.56 l
457.02 154.68 l
456.84 154.86 l
456.48 155.04 l
454.38 155.04 l
454.38 152.16 l
452.76 152.16 l
452.76 159.54 l
h
456.18 156.24 m
456.48 156.24 l
456.6 156.3 l
456.72 156.3 l
456.84 156.36 l
456.9 156.36 l
457.02 156.42 l
457.2 156.6 l
457.26 156.72 l
457.32 156.78 l
457.32 156.9 l
457.38 157.02 l
457.38 157.56 l
457.32 157.62 l
457.32 157.68 l
457.26 157.74 l
457.2 157.86 l
457.02 158.04 l
456.9 158.1 l
456.84 158.16 l
456.72 158.16 l
456.6 158.22 l
454.38 158.22 l
454.38 156.24 l
456.18 156.24 l
eofill
n
461.34 154.44 m
461.34 154.26 l
461.4 154.14 l
461.4 154.08 l
461.52 153.84 l
461.58 153.78 l
461.64 153.66 l
461.82 153.48 l
462.0 153.42 l
462.12 153.36 l
462.48 153.24 l
463.5 153.24 l
463.62 153.3 l
463.8 153.3 l
463.92 153.36 l
463.98 153.36 l
464.22 153.48 l
464.28 153.6 l
464.4 153.66 l
464.4 153.78 l
464.52 154.02 l
464.52 154.26 l
464.46 154.38 l
464.46 154.44 l
464.4 154.56 l
464.16 154.8 l
464.04 154.86 l
463.98 154.92 l
463.86 154.92 l
463.74 154.98 l
463.44 155.04 l
463.2 155.04 l
462.42 155.34 l
461.94 155.46 l
461.52 155.52 l
461.34 155.64 l
461.1 155.7 l
460.92 155.82 l
460.74 155.88 l
460.62 156.0 l
460.5 156.06 l
460.44 156.12 l
460.38 156.24 l
460.26 156.36 l
460.2 156.48 l
460.2 156.6 l
460.14 156.66 l
460.08 156.78 l
460.08 157.02 l
460.02 157.14 l
460.02 157.74 l
460.08 157.92 l
460.14 158.1 l
460.26 158.46 l
460.38 158.7 l
460.86 159.18 l
461.34 159.42 l
461.52 159.48 l
461.64 159.54 l
461.82 159.54 l
462.0 159.6 l
462.18 159.6 l
462.36 159.66 l
463.2 159.66 l
463.44 159.6 l
463.62 159.6 l
463.8 159.54 l
463.92 159.54 l
464.1 159.48 l
464.22 159.42 l
464.4 159.36 l
464.76 159.18 l
464.94 159.0 l
465.06 158.94 l
465.12 158.82 l
465.24 158.76 l
465.36 158.52 l
465.42 158.46 l
465.48 158.28 l
465.6 158.04 l
465.66 157.86 l
465.66 157.5 l
465.72 157.32 l
464.22 157.32 l
464.22 157.68 l
464.16 157.74 l
464.16 157.86 l
463.98 158.04 l
463.92 158.16 l
463.86 158.22 l
463.74 158.28 l
463.56 158.34 l
463.44 158.4 l
463.26 158.46 l
462.3 158.46 l
462.06 158.34 l
462.0 158.34 l
461.88 158.28 l
461.82 158.22 l
461.7 158.16 l
461.64 158.1 l
461.58 157.98 l
461.52 157.92 l
461.52 157.8 l
461.46 157.68 l
461.46 157.44 l
461.52 157.32 l
461.52 157.2 l
461.58 157.14 l
461.64 157.08 l
461.64 157.02 l
461.7 156.96 l
461.82 156.9 l
462.0 156.84 l
462.12 156.84 l
462.24 156.78 l
463.98 156.36 l
464.16 156.36 l
464.52 156.24 l
464.88 156.06 l
465.06 156.0 l
465.24 155.88 l
465.36 155.82 l
465.48 155.64 l
465.78 155.34 l
465.78 155.22 l
465.84 155.16 l
465.84 155.04 l
465.9 154.98 l
465.9 154.86 l
465.96 154.74 l
465.96 154.2 l
465.9 154.02 l
465.9 153.84 l
465.78 153.48 l
465.72 153.36 l
465.66 153.18 l
465.6 153.06 l
465.48 152.94 l
465.42 152.82 l
465.3 152.76 l
465.24 152.64 l
465.12 152.52 l
464.28 152.1 l
463.8 151.98 l
463.56 151.98 l
463.38 151.92 l
462.6 151.92 l
462.36 151.98 l
462.18 151.98 l
461.94 152.04 l
461.76 152.04 l
461.58 152.1 l
461.46 152.16 l
461.28 152.22 l
461.16 152.28 l
461.04 152.4 l
460.8 152.52 l
460.68 152.64 l
460.56 152.7 l
460.5 152.82 l
460.38 152.88 l
460.2 153.24 l
460.14 153.3 l
460.08 153.42 l
460.02 153.54 l
460.02 153.66 l
459.9 154.02 l
459.9 154.44 l
461.34 154.44 l
eofill
n
467.040009 152.160004 1.559998 7.380005 rectfill

n
473.22 152.16 m
471.66 152.16 l
471.66 158.22 l
469.38 158.22 l
469.38 159.54 l
475.32 159.54 l
475.32 158.22 l
473.22 158.22 l
473.22 152.16 l
eofill
n
481.8 158.22 m
477.84 158.22 l
477.84 156.66 l
481.38 156.66 l
481.38 155.34 l
477.84 155.34 l
477.84 153.48 l
481.92 153.48 l
481.92 152.16 l
476.22 152.16 l
476.22 159.54 l
481.8 159.54 l
481.8 158.22 l
eofill
n
483.119995 152.160004 1.440002 7.380005 rectfill

n
489.18 152.16 m
487.62 152.16 l
487.62 158.22 l
485.34 158.22 l
485.34 159.54 l
491.4 159.54 l
491.4 158.22 l
489.18 158.22 l
489.18 152.16 l
eofill
n
422.4 136.38 m
420.72 136.38 l
423.36 143.76 l
425.16 143.76 l
427.8 136.38 l
426.12 136.38 l
425.58 137.82 l
422.94 137.82 l
422.4 136.38 l
h
423.36 139.14 m
425.16 139.14 l
424.26 142.08 l
423.36 139.14 l
eofill
n
433.74 143.76 m
435.24 143.76 l
435.24 136.38 l
433.62 136.38 l
430.74 141.66 l
430.62 141.66 l
430.62 136.38 l
429.3 136.38 l
429.3 143.76 l
430.86 143.76 l
433.74 138.66 l
433.74 143.76 l
eofill
n
440.34 136.38 m
438.78 136.38 l
438.78 142.44 l
436.68 142.44 l
436.68 143.76 l
442.62 143.76 l
442.62 142.44 l
440.34 142.44 l
440.34 136.38 l
eofill
n
443.4 143.76 m
445.14 143.76 l
445.44 142.38 l
445.68 141.3 l
445.86 140.46 l
445.98 139.86 l
446.1 139.32 l
446.16 138.96 l
446.22 138.66 l
446.28 138.36 l
446.34 138.66 l
446.4 139.02 l
446.46 139.44 l
446.58 139.92 l
446.7 140.58 l
446.88 141.42 l
447.06 142.44 l
447.36 143.76 l
448.92 143.76 l
449.22 142.38 l
449.46 141.36 l
449.64 140.52 l
449.76 139.86 l
449.82 139.38 l
449.88 139.02 l
449.94 138.72 l
450.0 138.36 l
450.12 138.36 l
450.18 138.6 l
450.24 138.9 l
450.3 139.26 l
450.36 139.8 l
450.48 140.46 l
450.72 141.3 l
450.96 142.38 l
451.32 143.76 l
452.88 143.76 l
450.78 136.38 l
449.34 136.38 l
449.04 137.58 l
448.86 138.6 l
448.68 139.38 l
448.56 140.1 l
448.44 140.64 l
448.32 141.18 l
448.26 141.66 l
448.14 142.2 l
448.02 141.66 l
447.96 141.18 l
447.84 140.7 l
447.72 140.16 l
447.6 139.5 l
447.42 138.72 l
447.24 137.7 l
446.94 136.38 l
445.5 136.38 l
443.4 143.76 l
eofill
n
459.78 142.44 m
455.82 142.44 l
455.82 140.88 l
459.36 140.88 l
459.36 139.56 l
455.82 139.56 l
455.82 137.7 l
459.9 137.7 l
459.9 136.38 l
454.38 136.38 l
454.38 143.76 l
459.78 143.76 l
459.78 142.44 l
eofill
n
461.76 143.76 m
465.78 143.76 l
465.96 143.7 l
466.08 143.7 l
466.26 143.64 l
466.38 143.64 l
466.98 143.34 l
467.04 143.28 l
467.16 143.22 l
467.22 143.1 l
467.34 142.98 l
467.58 142.62 l
467.64 142.44 l
467.76 142.08 l
467.76 141.96 l
467.82 141.78 l
467.82 141.48 l
467.76 141.36 l
467.76 141.24 l
467.7 141.12 l
467.7 140.94 l
467.64 140.82 l
467.58 140.7 l
467.52 140.58 l
467.16 140.22 l
467.04 140.16 l
466.92 140.04 l
466.74 139.98 l
466.62 139.92 l
466.74 139.92 l
466.98 139.8 l
467.1 139.68 l
467.22 139.62 l
467.28 139.5 l
467.34 139.44 l
467.4 139.32 l
467.4 139.2 l
467.46 139.08 l
467.52 138.9 l
467.52 137.4 l
467.58 137.1 l
467.58 136.92 l
467.64 136.86 l
467.64 136.74 l
467.82 136.56 l
467.88 136.56 l
467.94 136.5 l
467.94 136.38 l
466.2 136.38 l
466.14 136.68 l
466.02 136.98 l
466.02 137.16 l
465.96 137.34 l
465.96 138.54 l
465.9 138.66 l
465.9 138.78 l
465.84 138.84 l
465.78 138.96 l
465.72 139.02 l
465.66 139.14 l
465.6 139.14 l
465.48 139.2 l
465.3 139.26 l
463.2 139.26 l
463.2 136.38 l
461.76 136.38 l
461.76 143.76 l
h
465.06 140.46 m
465.3 140.46 l
465.42 140.52 l
465.54 140.52 l
465.66 140.58 l
465.78 140.58 l
465.96 140.76 l
466.08 140.82 l
466.08 140.94 l
466.14 141.0 l
466.2 141.12 l
466.2 141.84 l
466.14 141.9 l
466.14 142.02 l
466.08 142.08 l
465.84 142.32 l
465.72 142.38 l
465.6 142.38 l
465.48 142.44 l
463.2 142.44 l
463.2 140.46 l
465.06 140.46 l
eofill
n
471.24 136.38 m
469.68 136.38 l
469.68 143.76 l
473.46 143.76 l
473.58 143.7 l
473.7 143.7 l
473.76 143.64 l
473.88 143.64 l
474.0 143.58 l
474.12 143.58 l
474.18 143.52 l
474.3 143.46 l
474.36 143.4 l
474.48 143.34 l
474.84 142.98 l
474.9 142.86 l
474.96 142.8 l
475.08 142.56 l
475.14 142.5 l
475.14 142.38 l
475.26 142.14 l
475.26 141.9 l
475.32 141.78 l
475.32 141.12 l
475.26 140.94 l
475.26 140.76 l
475.2 140.52 l
475.08 140.34 l
475.02 140.16 l
474.9 139.98 l
474.72 139.8 l
474.66 139.68 l
474.48 139.5 l
474.36 139.44 l
474.3 139.38 l
474.06 139.26 l
473.88 139.2 l
473.64 139.08 l
473.46 139.08 l
473.28 139.02 l
471.24 139.02 l
471.24 136.38 l
h
472.68 140.34 m
472.86 140.34 l
473.04 140.4 l
473.16 140.4 l
473.52 140.58 l
473.58 140.7 l
473.64 140.76 l
473.64 140.88 l
473.7 141.0 l
473.7 141.18 l
473.76 141.36 l
473.76 141.66 l
473.7 141.78 l
473.7 141.84 l
473.64 141.96 l
473.64 142.02 l
473.58 142.08 l
473.52 142.14 l
473.4 142.2 l
473.34 142.26 l
473.22 142.32 l
473.16 142.38 l
473.04 142.38 l
472.86 142.44 l
471.24 142.44 l
471.24 140.34 l
472.68 140.34 l
eofill
n
482.46 142.44 m
478.5 142.44 l
478.5 140.88 l
482.16 140.88 l
482.16 139.56 l
478.5 139.56 l
478.5 137.7 l
482.7 137.7 l
482.7 136.38 l
477.06 136.38 l
477.06 143.76 l
482.46 143.76 l
482.46 142.44 l
eofill
n
488.94 143.76 m
490.38 143.76 l
490.38 136.38 l
488.76 136.38 l
485.88 141.66 l
485.76 141.66 l
485.76 136.38 l
484.32 136.38 l
484.32 143.76 l
486.0 143.76 l
488.94 138.66 l
488.94 143.76 l
eofill
n
369.48 210.96 m
369.36 211.2 l
369.12 211.44 l
368.94 211.68 l
368.7 211.98 l
368.46 212.22 l
368.28 212.34 l
368.16 212.46 l
367.98 212.58 l
367.86 212.64 l
367.5 212.88 l
367.32 212.94 l
367.2 213.06 l
367.02 213.12 l
366.78 213.18 l
366.42 213.3 l
366.24 213.3 l
366.06 213.36 l
364.98 213.36 l
364.8 213.3 l
364.32 213.18 l
363.84 212.94 l
363.54 212.82 l
363.36 212.7 l
363.12 212.52 l
362.88 212.4 l
362.34 211.86 l
362.22 211.68 l
362.04 211.56 l
361.92 211.38 l
361.8 211.14 l
361.68 210.96 l
361.56 210.78 l
361.5 210.54 l
361.44 210.36 l
361.32 210.18 l
361.26 209.94 l
361.2 209.76 l
361.14 209.52 l
361.08 209.34 l
361.08 209.1 l
361.02 208.92 l
360.96 208.5 l
360.96 208.08 l
360.9 207.66 l
360.9 203.1 l
360.96 202.56 l
360.96 201.96 l
361.02 201.42 l
361.08 200.82 l
361.2 200.22 l
361.26 199.56 l
361.38 198.96 l
361.5 198.3 l
361.62 197.7 l
361.8 197.04 l
361.98 196.38 l
362.16 195.78 l
362.4 195.12 l
362.64 194.52 l
362.94 193.86 l
363.54 192.66 l
363.9 192.06 l
364.32 191.46 l
365.16 190.38 l
365.64 189.84 l
366.72 188.88 l
367.32 188.4 l
367.98 187.92 l
369.18 187.08 l
369.78 186.72 l
371.58 185.82 l
372.18 185.58 l
372.72 185.34 l
373.32 185.16 l
374.4 184.8 l
375.0 184.68 l
375.54 184.56 l
376.02 184.44 l
376.56 184.38 l
377.04 184.32 l
377.58 184.26 l
378.06 184.2 l
378.54 184.2 l
378.96 184.14 l
379.86 184.14 l
380.28 184.2 l
381.06 184.2 l
381.42 184.26 l
382.08 184.32 l
382.68 184.38 l
382.8 184.38 l
382.98 184.44 l
383.1 184.44 l
383.22 184.56 l
383.28 184.56 l
383.34 184.62 l
383.34 184.68 l
383.4 184.74 l
383.4 184.8 l
383.46 184.86 l
383.46 184.92 l
383.58 185.04 l
383.58 185.1 l
383.64 185.16 l
383.64 185.28 l
383.7 185.34 l
383.7 185.46 l
383.64 185.52 l
383.64 185.64 l
383.58 185.7 l
383.58 185.76 l
383.52 185.76 l
383.46 185.82 l
369.48 210.96 l
h
362.88 206.58 m
362.88 207.66 l
362.94 208.08 l
362.94 208.44 l
363.0 208.74 l
363.12 209.1 l
363.12 209.22 l
363.18 209.34 l
363.24 209.52 l
363.3 209.64 l
363.54 210.12 l
363.84 210.42 l
363.9 210.54 l
364.14 210.66 l
364.32 210.84 l
364.56 210.96 l
364.74 211.02 l
364.98 211.14 l
365.16 211.2 l
365.28 211.26 l
365.4 211.26 l
365.52 211.32 l
365.88 211.32 l
366.12 211.2 l
366.18 211.2 l
366.54 211.02 l
366.9 210.78 l
367.2 210.48 l
367.32 210.3 l
367.62 210.0 l
367.62 209.88 l
367.68 209.82 l
367.74 209.7 l
367.92 209.46 l
368.1 209.1 l
368.34 208.68 l
368.58 208.2 l
368.94 207.66 l
369.24 207.0 l
369.66 206.34 l
370.5 204.78 l
370.98 203.88 l
371.46 203.04 l
373.08 200.16 l
367.62 190.86 l
366.78 191.7 l
365.7 193.14 l
365.1 194.22 l
364.38 195.84 l
364.2 196.38 l
364.02 196.98 l
363.84 197.52 l
363.72 198.06 l
363.54 198.66 l
363.42 199.2 l
363.36 199.8 l
363.24 200.34 l
363.06 201.96 l
363.0 202.44 l
363.0 202.98 l
362.94 203.46 l
362.94 204.36 l
362.88 205.2 l
362.88 206.58 l
h
369.24 189.54 m
374.22 198.18 l
374.76 197.34 l
376.2 194.64 l
377.64 192.12 l
378.12 191.34 l
378.96 189.78 l
379.38 189.12 l
380.1 187.8 l
380.7 186.72 l
381.0 186.24 l
380.4 186.24 l
379.8 186.18 l
379.2 186.18 l
378.54 186.24 l
378.24 186.24 l
377.88 186.3 l
377.52 186.3 l
377.22 186.36 l
376.86 186.42 l
376.5 186.42 l
376.14 186.54 l
375.72 186.6 l
375.36 186.66 l
375.0 186.78 l
374.58 186.9 l
374.22 187.02 l
373.8 187.14 l
373.44 187.26 l
371.76 187.98 l
371.34 188.22 l
370.92 188.4 l
370.5 188.7 l
370.08 188.94 l
369.24 189.54 l
0.12157 0.10196 0.090196 sc
eofill
n
411.96 235.56 m
386.94 235.56 l
386.88 235.5 l
386.76 235.5 l
386.7 235.44 l
386.58 235.44 l
386.34 235.2 l
386.28 235.08 l
386.22 235.02 l
386.22 234.96 l
386.16 234.84 l
386.16 234.6 l
386.1 234.48 l
386.1 215.7 l
385.8 215.76 l
385.5 215.88 l
384.9 216.0 l
384.6 216.0 l
384.24 216.06 l
381.48 216.06 l
380.28 216.12 l
377.52 216.12 l
376.08 216.18 l
373.2 216.18 l
371.82 216.24 l
370.5 216.24 l
369.3 216.3 l
366.66 216.3 l
366.24 216.36 l
365.94 216.36 l
365.7 216.3 l
365.04 216.3 l
364.68 216.24 l
364.26 216.18 l
363.3 215.94 l
363.18 234.72 l
363.18 234.9 l
363.12 234.96 l
363.12 235.08 l
363.06 235.2 l
363.0 235.26 l
362.94 235.38 l
362.76 235.56 l
362.64 235.62 l
362.58 235.68 l
362.52 235.74 l
362.4 235.74 l
362.28 235.8 l
337.08 235.8 l
336.96 235.74 l
336.84 235.74 l
336.78 235.68 l
336.66 235.62 l
336.42 235.38 l
336.36 235.26 l
336.3 235.2 l
336.3 235.08 l
336.24 234.96 l
336.24 232.38 l
336.3 232.26 l
336.36 232.14 l
336.42 232.08 l
336.48 231.96 l
336.54 231.9 l
336.66 231.84 l
336.66 231.78 l
336.72 231.78 l
336.72 231.72 l
336.78 231.72 l
336.9 231.66 l
336.96 231.6 l
338.7 231.6 l
339.6 231.42 l
339.9 231.3 l
340.02 231.24 l
340.2 231.18 l
340.44 231.06 l
340.62 231.0 l
340.86 230.76 l
340.98 230.7 l
341.34 230.34 l
341.4 230.22 l
341.52 230.04 l
341.58 229.92 l
341.64 229.74 l
341.7 229.62 l
341.82 229.26 l
341.82 229.08 l
341.88 228.9 l
341.88 228.48 l
341.94 228.24 l
341.94 199.92 l
342.0 199.68 l
342.0 199.38 l
342.24 197.94 l
342.3 197.52 l
342.42 197.1 l
342.48 196.68 l
342.6 196.26 l
342.78 195.78 l
342.9 195.36 l
343.08 194.88 l
343.26 194.34 l
343.5 193.86 l
343.68 193.38 l
343.92 192.9 l
344.22 192.36 l
344.46 191.88 l
344.82 191.34 l
345.12 190.8 l
345.48 190.32 l
345.9 189.78 l
342.3 184.02 l
342.3 183.78 l
342.24 183.72 l
342.18 183.72 l
342.18 183.66 l
342.12 183.6 l
342.0 183.24 l
341.88 183.06 l
341.7 182.82 l
341.64 182.7 l
341.52 182.58 l
341.4 182.4 l
341.28 182.28 l
341.1 182.16 l
340.98 182.04 l
340.26 181.56 l
340.02 181.5 l
339.78 181.38 l
339.54 181.32 l
339.24 181.2 l
339.0 181.14 l
338.7 181.08 l
338.34 181.02 l
338.04 181.02 l
337.68 180.96 l
337.08 180.96 l
336.96 180.9 l
336.84 180.9 l
336.78 180.84 l
336.66 180.84 l
336.42 180.6 l
336.36 180.48 l
336.3 180.42 l
336.3 180.3 l
336.24 180.24 l
336.24 177.06 l
336.3 176.94 l
336.3 176.82 l
336.36 176.76 l
336.42 176.64 l
336.66 176.4 l
336.78 176.34 l
336.84 176.28 l
337.08 176.28 l
337.2 176.22 l
355.68 176.22 l
355.98 176.16 l
357.54 176.16 l
357.84 176.22 l
358.08 176.22 l
359.28 176.46 l
359.58 176.58 l
359.94 176.64 l
360.24 176.76 l
360.54 176.94 l
360.84 177.06 l
361.44 177.42 l
362.34 178.14 l
362.58 178.44 l
362.88 178.74 l
363.12 179.04 l
363.36 179.4 l
363.54 179.76 l
363.6 179.82 l
363.66 179.94 l
363.9 180.3 l
364.08 180.6 l
364.2 180.84 l
364.38 181.14 l
364.5 181.38 l
383.76 181.38 l
384.24 180.42 l
384.42 180.18 l
384.6 179.88 l
384.78 179.64 l
384.96 179.34 l
385.14 179.1 l
385.38 178.86 l
385.62 178.56 l
385.8 178.32 l
386.04 178.08 l
386.28 177.9 l
386.4 177.78 l
386.52 177.72 l
386.64 177.6 l
387.12 177.36 l
387.72 177.0 l
388.02 176.88 l
388.62 176.64 l
388.98 176.52 l
389.28 176.46 l
389.64 176.34 l
390.9 176.16 l
391.38 176.16 l
391.92 176.1 l
411.42 176.1 l
411.54 176.16 l
411.6 176.16 l
411.72 176.22 l
411.78 176.22 l
411.9 176.34 l
411.96 176.46 l
412.08 176.58 l
412.14 176.7 l
412.2 176.76 l
412.2 176.94 l
412.26 177.06 l
412.26 179.88 l
412.2 180.0 l
412.2 180.06 l
412.14 180.18 l
412.08 180.36 l
411.96 180.6 l
411.78 180.66 l
411.6 180.78 l
411.48 180.78 l
411.36 180.84 l
411.0 180.84 l
410.88 180.78 l
410.7 180.78 l
410.52 180.72 l
410.28 180.72 l
409.98 180.78 l
409.68 180.78 l
409.5 180.84 l
409.32 180.84 l
408.6 181.08 l
408.42 181.2 l
408.24 181.26 l
407.52 181.74 l
407.16 182.1 l
407.04 182.28 l
406.86 182.46 l
406.74 182.7 l
406.56 182.94 l
402.72 189.54 l
403.14 190.02 l
403.5 190.5 l
403.86 191.04 l
404.16 191.58 l
404.52 192.06 l
404.76 192.6 l
405.06 193.08 l
405.3 193.62 l
405.54 194.1 l
406.26 196.02 l
406.38 196.5 l
406.62 197.34 l
406.74 197.76 l
406.8 198.18 l
406.92 198.54 l
406.98 198.9 l
407.04 199.56 l
407.16 200.16 l
407.22 200.64 l
407.22 227.52 l
407.28 227.76 l
407.28 228.0 l
407.34 228.24 l
407.34 228.48 l
407.4 228.66 l
407.46 228.9 l
407.52 229.08 l
407.64 229.26 l
407.7 229.44 l
407.82 229.56 l
407.88 229.74 l
408.0 229.86 l
408.12 230.04 l
408.3 230.16 l
408.54 230.4 l
409.14 230.7 l
409.32 230.76 l
409.44 230.82 l
409.56 230.82 l
409.74 230.88 l
409.98 230.88 l
410.28 230.94 l
410.76 230.94 l
411.0 230.88 l
411.36 230.88 l
411.6 230.82 l
411.72 230.82 l
411.78 230.76 l
412.2 230.76 l
412.44 230.88 l
412.62 231.06 l
412.68 231.12 l
412.74 231.18 l
412.86 231.24 l
412.98 231.48 l
412.98 231.6 l
413.04 231.66 l
413.04 234.72 l
412.98 234.84 l
412.98 234.96 l
412.86 235.08 l
412.8 235.2 l
412.68 235.26 l
412.62 235.32 l
412.56 235.38 l
412.44 235.44 l
412.38 235.44 l
412.26 235.5 l
412.2 235.5 l
412.08 235.56 l
411.96 235.56 l
h
361.86 180.84 m
361.5 180.24 l
361.26 180.0 l
361.08 179.76 l
360.12 179.04 l
359.16 178.56 l
358.92 178.5 l
358.62 178.38 l
358.38 178.32 l
358.14 178.32 l
357.9 178.26 l
357.72 178.2 l
357.48 178.2 l
357.24 178.14 l
356.52 178.14 l
355.98 178.2 l
355.8 178.2 l
355.68 178.26 l
355.62 178.32 l
338.34 178.32 l
338.34 178.98 l
338.76 179.04 l
339.48 179.16 l
339.84 179.28 l
340.14 179.34 l
340.5 179.46 l
340.8 179.58 l
341.04 179.7 l
341.34 179.82 l
341.58 179.94 l
341.82 180.12 l
342.06 180.24 l
342.24 180.42 l
342.42 180.54 l
342.6 180.72 l
342.78 180.84 l
342.96 181.02 l
343.08 181.2 l
343.26 181.32 l
343.38 181.5 l
343.74 182.1 l
343.92 182.34 l
343.98 182.58 l
344.16 182.94 l
347.34 188.1 l
347.64 187.8 l
348.24 187.32 l
348.54 187.02 l
349.8 185.94 l
350.22 185.64 l
350.7 185.28 l
351.12 185.04 l
351.54 184.74 l
351.96 184.5 l
352.38 184.2 l
352.86 183.96 l
353.28 183.78 l
353.7 183.54 l
354.54 183.18 l
355.02 183.0 l
355.44 182.82 l
355.86 182.7 l
356.28 182.52 l
357.54 182.16 l
358.02 182.04 l
358.86 181.92 l
359.28 181.8 l
360.54 181.62 l
360.96 181.62 l
361.8 181.5 l
362.22 181.5 l
361.86 180.84 l
h
410.28 178.74 m
410.28 178.2 l
392.04 178.2 l
391.56 178.26 l
391.14 178.26 l
390.72 178.32 l
390.42 178.32 l
390.06 178.38 l
389.76 178.44 l
389.52 178.5 l
389.22 178.56 l
389.04 178.68 l
388.8 178.74 l
388.08 179.1 l
387.84 179.28 l
387.72 179.28 l
387.66 179.4 l
387.6 179.46 l
387.48 179.52 l
387.12 179.88 l
386.58 180.6 l
386.46 180.84 l
386.28 181.08 l
386.1 181.38 l
385.98 181.62 l
385.8 181.86 l
385.56 182.4 l
385.32 182.82 l
385.26 182.94 l
384.9 183.3 l
384.66 183.42 l
384.6 183.42 l
384.54 183.48 l
367.38 183.48 l
366.3 183.42 l
364.08 183.42 l
363.54 183.48 l
362.4 183.48 l
359.7 183.78 l
357.54 184.26 l
356.46 184.62 l
355.86 184.8 l
355.32 185.04 l
354.78 185.22 l
354.24 185.52 l
353.7 185.76 l
353.16 186.12 l
352.62 186.42 l
352.08 186.78 l
351.48 187.14 l
350.4 187.98 l
349.86 188.46 l
349.26 189.0 l
348.72 189.48 l
348.24 190.02 l
346.98 191.64 l
346.62 192.18 l
345.72 193.8 l
345.24 194.88 l
345.06 195.36 l
344.88 195.9 l
344.76 196.38 l
344.58 196.86 l
344.46 197.34 l
344.4 197.76 l
344.28 198.18 l
344.16 199.02 l
344.1 199.32 l
344.1 199.68 l
344.04 199.98 l
344.04 228.36 l
343.98 228.72 l
343.98 229.02 l
343.8 229.92 l
343.74 230.22 l
343.62 230.52 l
343.26 231.24 l
343.08 231.48 l
342.9 231.66 l
342.72 231.9 l
342.54 232.08 l
342.06 232.44 l
341.82 232.68 l
341.52 232.8 l
341.28 232.98 l
341.04 233.1 l
340.74 233.22 l
340.5 233.34 l
340.2 233.4 l
339.24 233.64 l
339.0 233.64 l
338.76 233.7 l
338.34 233.7 l
361.08 233.7 l
361.2 214.5 l
361.2 214.2 l
361.32 213.96 l
361.44 213.84 l
361.5 213.72 l
361.56 213.66 l
361.62 213.66 l
361.68 213.6 l
361.8 213.54 l
361.86 213.48 l
361.92 213.48 l
361.98 213.42 l
362.4 213.42 l
362.76 213.6 l
362.94 213.72 l
363.12 213.78 l
363.36 213.9 l
363.6 213.96 l
363.78 214.02 l
364.26 214.14 l
364.5 214.14 l
364.92 214.2 l
365.34 214.2 l
365.7 214.26 l
366.12 214.26 l
366.54 214.2 l
369.18 214.2 l
370.38 214.14 l
371.7 214.14 l
373.14 214.08 l
376.08 214.08 l
377.52 214.02 l
380.28 214.02 l
381.48 213.96 l
384.12 213.96 l
384.48 213.9 l
384.78 213.84 l
385.02 213.78 l
385.32 213.66 l
385.56 213.6 l
386.28 213.24 l
386.46 213.12 l
386.7 212.94 l
387.06 212.7 l
387.66 212.1 l
387.78 211.92 l
387.9 211.8 l
388.08 211.5 l
388.26 211.26 l
388.32 211.02 l
388.44 210.84 l
388.5 210.72 l
388.5 210.66 l
388.62 210.54 l
404.7 181.92 l
404.88 181.68 l
405.0 181.44 l
405.18 181.2 l
405.3 181.02 l
405.48 180.78 l
405.66 180.6 l
405.84 180.48 l
405.96 180.3 l
406.14 180.12 l
407.04 179.52 l
407.28 179.4 l
407.46 179.34 l
407.64 179.22 l
408.36 178.98 l
408.6 178.92 l
408.78 178.92 l
408.96 178.86 l
409.32 178.8 l
409.62 178.74 l
410.28 178.74 l
h
407.1 231.84 m
406.98 231.78 l
406.86 231.66 l
406.74 231.6 l
406.62 231.48 l
406.56 231.36 l
406.44 231.24 l
406.32 231.18 l
406.26 231.06 l
406.14 230.94 l
406.08 230.82 l
405.96 230.58 l
405.78 230.28 l
405.66 229.98 l
405.6 229.68 l
405.48 229.38 l
405.42 229.08 l
405.3 228.36 l
405.3 228.0 l
405.24 227.64 l
405.24 201.12 l
405.18 200.82 l
405.18 200.46 l
405.12 199.98 l
405.0 199.44 l
404.88 198.84 l
404.7 198.12 l
404.64 197.76 l
404.52 197.4 l
404.4 197.04 l
404.28 196.62 l
404.16 196.26 l
403.8 195.42 l
403.62 194.94 l
403.26 194.1 l
402.78 193.26 l
402.54 192.78 l
402.3 192.36 l
402.0 191.94 l
401.7 191.46 l
390.48 211.5 l
390.36 211.68 l
390.0 212.28 l
389.76 212.7 l
389.58 212.88 l
389.22 213.36 l
388.86 213.84 l
388.62 214.02 l
388.38 214.26 l
388.08 214.5 l
388.08 233.58 l
410.94 233.58 l
410.94 232.92 l
409.56 232.92 l
408.84 232.74 l
408.54 232.68 l
408.3 232.56 l
408.06 232.5 l
407.82 232.38 l
407.58 232.2 l
407.46 232.14 l
407.34 232.02 l
407.22 231.96 l
407.1 231.84 l
eofill
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
